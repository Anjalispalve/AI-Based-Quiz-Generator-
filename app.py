**Use Case:** Generate quiz questions and answers based on a given topic.
"""
ASGI config for myquizproject project.
It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myquizproject.settings')
application = get_asgi_application()
 ***settings.py***
"""
Django settings for myquizproject project.
Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pn+++&a^zem*4fwtq+hoenfg)8srd+j&d7mo=2eco^omm8m55@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'quizapp',  # Add your quiz app here
      
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'myquizproject.urls'
WSGI_APPLICATION = 'myquizproject.wsgi.application'
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

*** urls.py***
"""
URL configuration for myquizproject project.
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from quizapp.views import generate_quiz
urlpatterns =[
    path('admin/', admin.site.urls),
    path('',generate_quiz, name='generate_quiz'),
    path('quizapp', include('quizapp.urls')),  # Directing to the quiz app  
]
"""
WSGI config for myquizproject project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myquizproject.settings')

application = get_wsgi_application()

<!-- quiz_form.html -->
<html>
<head>
    <title>Generate Quiz</title>
</head>
<body>
    <h1>Generate a Quiz</h1>
    <form method="POST">
        {% csrf_token %}
        <label for="topic">Topic:</label>
        <input type="text" id="topic" name="topic" required>
        <button type="submit">Generate Quiz</button>
    </form>
</body>
</html>
<h1>Quiz on {{ page_obj.0.topic }}</h1>
<form method="post" action="{% url 'submit_quiz' topic=page_obj.0.topic %}">
    {% csrf_token %}
    <ul>
    {% for item in page_obj %}
        <li>
            <strong>Q:</strong> {{ item.question }}<br>
            <input type="text" name="answer_{{ item.id }}" placeholder="Your answer">
        </li>
    {% endfor %}
    </ul>
    <button type="submit">Submit Answers</button>
</form>

<div>
    <span class="step-links">
        {% if page_obj.has_previous %}
            <a href="?page=1">&laquo; first</a>
            <a href="?page={{ page_obj.previous_page_number }}">previous</a>
        {% endif %}
        
        <span class="current">
            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
        </span>

        {% if page_obj.has_next %}
            <a href="?page={{ page_obj.next_page_number }}">next</a>
            <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
        {% endif %}
    </span>
</div>

#admin.py
from django.contrib import admin
from .models import Quiz

class QuizAdmin(admin.ModelAdmin):
    list_display = ('topic', 'question', 'answer')
    search_fields = ('topic', 'question')
    list_filter = ('topic',)

admin.site.register(Quiz, QuizAdmin)

#urls.py
from django.urls import path
from . import views
from django.contrib import admin

urlpatterns = [
    
    path('', views.generate_quiz, name='generate_quiz'),
    path('quiz/<str:topic>/', views.display_quiz, name='display_quiz'),
    path('quiz/<str:topic>/submit/', views.submit_quiz, name='submit_quiz'),
]
#models.py
from django.db import models

class Quiz(models.Model):
    topic = models.CharField(max_length=200)
    question = models.TextField()
    answer = models.TextField()

    def __str__(self):
        return f"Question: {self.question} - Answer: {self.answer}"
#views.py
import openai
from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import HttpResponse
from django.core.paginator import Paginator
from .models import Quiz


openai.api_key = 'your-openai-api-key'

def generate_quiz(request):
    if request.method == 'POST':
        topic = request.POST.get('topic')
        quiz_content = generate_quiz_from_api(request, topic)  # Pass request here
        if quiz_content:
            save_quiz_to_db(topic, quiz_content)
            return redirect('display_quiz', topic=topic)
        else:
            return redirect('generate_quiz')  # Stay on the same page if error occurs
    return render(request, 'quizapp/quiz_form.html')


def generate_quiz_from_api(request, topic):
    prompt = f"Generate 5 quiz questions with answers about: {topic}"
    try:
        response = openai.Completion.create(
            model="gpt-4",
            prompt=prompt,
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].text.strip()
    except openai.OpenAIError as e:  # This handles all OpenAI-related errors
        messages.error(request, f"There was an error generating the quiz: {str(e)}")
        return None

def save_quiz_to_db(topic, quiz_content):
    questions_and_answers = quiz_content.split("\n")
    for qa in questions_and_answers:
        if qa.strip():
            try:
                question, answer = qa.split("Answer:")  # Make sure this matches the format
                quiz = Quiz(topic=topic, question=question.strip(), answer=answer.strip())
                quiz.save()
            except ValueError:
                continue  # Skip if there's an error in splitting

def display_quiz(request, topic):
    quiz = Quiz.objects.filter(topic=topic)
    paginator = Paginator(quiz, 5)  # Correct usage of Paginator
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'quizapp/quiz_template.html', {'page_obj': page_obj})

def submit_quiz(request, topic):
    if request.method == 'POST':
        quiz = Quiz.objects.filter(topic=topic)
        score = 0
        for item in quiz:
            user_answer = request.POST.get(f"answer_{item.id}")
            if user_answer.strip().lower() == item.answer.strip().lower():
                score += 1
        return HttpResponse(f"You scored {score} out of {len(quiz)}!")
#manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys
def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myquizproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
if __name__ == '__main__':
    main()
